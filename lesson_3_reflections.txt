1) When would you want to use a remote repository rather than keeping all your work local?
Having a remote is recommendable to keep the data secure, in case something happens with the local storage. And for callaborate with other persons, having a remote is a fundamenta step to take
2) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
If you can review the changes in the remote repository, I think is better to choose when to pull. I preffer having the reponsibility to decide when to do it.



3) about push -ing manually
It always best to know what you are doing, instead to leaving the responsibility to pother thing.
I preffer to decide when I want to send the data to the remote location. Shortening the loop of syncronization should cover me from loosing data in case something happens with the local repository. That is, I can push the changes that I want offen enough, so I secure the data and still decide what to send to the remote location.

4)Describe the differences between forks, clones, and branches. When would you use one instead of another?
-Fork: is posible only in github, is when you want to clone a repository directly in github, and let the people know  that the code source is another repository.
-Clone: when you want to copy a repository, from local to remote or local to local. It can be used to take data from a repository to local. It has multiple uses.
-Branch: making a branch it can be useful to experiment inside a repository, to try to implement a new feature without risking to change the master branch. It can be used to callaborate, because every developer can create a new branch to work on his or her own and when the development is ready and tested you can pull the new branch into the master branch.

5) What is the benefit of having a copy of the last known state of the remote stored locally?
  It's a way to avoid future conflicts, because if you work on something that is up to date chaces are that you wont have so many conflicts as is you work with some code that is out of date

6)How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
It is much easier to collaborate with git, I have worked with SVN before,but I feel git makes me more productive, it provides a framework and and  a rhythm, it like a work flow. I feel that  working towards a commit, give a sure end to work, and provides a way to feel sure that you are advancing towards your goals, besides you are sure that you can experiment a can be sure that if you make a mistake all the prevous versions support you. Collaborating with this mindset is much more easy.
 7)When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

 I think making a different different branch can be useful when we are collaborating with other people because every person can makes hes changes in a different branch without putting the master branch in  danger, and whenever there is an agreement that the changes are safe those changes can be merged in the master branch.
